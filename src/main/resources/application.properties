
# use the default server port
server.port=8080

# setup local h2 database config
spring.datasource.url=jdbc:h2:file:./data/demo

spring.datasource.username=admin
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# setup local h2 database console
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.h2.console.settings.web-allow-others=false

# create schema on startup and destroy it on shutdown
spring.jpa.hibernate.ddl-auto=create-drop

#This configuration property spring.jpa.hibernate.ddl.auto is used to specify how Hibernate should manage the database schema.
#Setting spring.jpa.hibernate.ddl.auto=create-drop instructs Hibernate to automatically create the database schema on startup and then drop the schema on shutdown. This means that every time the application starts up, the database schema will be created from scratch, and when the application shuts down, the schema will be dropped, effectively deleting all data from the database.
#This setting is typically used during development and testing when you want to start with a clean database every time the application starts up. However, it should not be used in production environments as it can result in data loss. In production, you should use a more appropriate value for this property, such as update or validate, depending on your requirements.

spring.datasource.driverClassName=org.h2.Driver
#The configuration property spring.datasource.driverClassName specifies the fully qualified name of the JDBC driver class that will be used to connect to the database.
#In this case, org.h2.Driver is the JDBC driver class for the H2 database engine. The H2 database is an open-source relational database management system that is written in Java and can be run in embedded mode, as a standalone server, or as a clustered database.
#By specifying the driver class name as org.h2.Driver, the Spring application will use the H2 database as the datasource for the application. When the application starts up, Spring will look for the H2 JDBC driver class in the application's classpath and use it to connect to the H2 database.

